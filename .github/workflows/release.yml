name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # Generate changelog
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v $VERSION | head -1)
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## 🚀 What's New in $VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### 📝 Changes since $PREVIOUS_TAG" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "## 🚀 Initial Release $VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### ✨ Features" >> RELEASE_NOTES.md
          echo "- Professional web interface for VM assessment" >> RELEASE_NOTES.md
          echo "- Oracle Cloud Infrastructure BOM generation" >> RELEASE_NOTES.md
          echo "- Multiple report formats (Excel, CSV, Text, JSON)" >> RELEASE_NOTES.md
          echo "- Container-ready deployment" >> RELEASE_NOTES.md
          echo "- Kubernetes native support" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "### 📦 Container Images" >> RELEASE_NOTES.md
        echo "- \`ghcr.io/${{ github.repository }}:$VERSION\`" >> RELEASE_NOTES.md
        echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### 🚀 Quick Start" >> RELEASE_NOTES.md
        echo "\`\`\`bash" >> RELEASE_NOTES.md
        echo "# Pull and run" >> RELEASE_NOTES.md
        echo "docker run -p 8000:8000 ghcr.io/${{ github.repository }}:$VERSION" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "# Or deploy to Kubernetes" >> RELEASE_NOTES.md
        echo "kubectl apply -f https://github.com/${{ github.repository }}/releases/download/$VERSION/k8s-manifests.yaml" >> RELEASE_NOTES.md
        echo "\`\`\`" >> RELEASE_NOTES.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: ${{ env.VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

  # Build and publish container images
  build-images:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Containerfile
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          VERSION=${{ github.ref_name }}

  # Create release artifacts
  create-artifacts:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Kubernetes manifests bundle
      run: |
        # Create combined manifest file
        cat k8s/*.yaml > k8s-manifests.yaml
        
        # Create archive with all deployment files
        tar -czf vm-assessment-bom-${{ github.ref_name }}.tar.gz \
          k8s/ \
          scripts/ \
          Containerfile \
          requirements.txt \
          README.md \
          DEPLOYMENT.md

    - name: Upload Kubernetes manifests
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./k8s-manifests.yaml
        asset_name: k8s-manifests.yaml
        asset_content_type: application/x-yaml

    - name: Upload deployment archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./vm-assessment-bom-${{ github.ref_name }}.tar.gz
        asset_name: vm-assessment-bom-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  # Security scan released images
  security-scan:
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify deployment
  notify:
    runs-on: ubuntu-latest
    needs: [create-release, build-images, create-artifacts]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success' && needs.build-images.result == 'success'
      run: |
        echo "🎉 Release ${{ github.ref_name }} created successfully!"
        echo "📦 Container images published to ghcr.io/${{ github.repository }}"
        echo "📋 Kubernetes manifests available in release assets"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

    - name: Notify failure
      if: failure()
      run: |
        echo "❌ Release ${{ github.ref_name }} failed!"
        echo "Please check the workflow logs for details."